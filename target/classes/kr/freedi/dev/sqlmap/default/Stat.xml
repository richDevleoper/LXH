<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Stat">

	<sql id="defCond">
		<where>
			<trim prefixOverrides="AND|OR">
				<if test="statTyp != null and statTyp != ''">
					AND STAT_TYP = #{statTyp}
				</if>
				<if test="statYear != null and statYear != ''">
					AND YEAR = #{statYear}
				</if>
				<if test="statLang != null and statLang != ''">
					AND DSPLY_LANG = #{statLang}
				</if>
				<if test="statCntry != null and statCntry != ''">
					AND DSPLY_CNTRY = #{statCntry}
				</if>
			</trim>
		</where>
	</sql>
	
	<insert id="insert">
		<selectKey keyProperty="statKey" resultType="int"  order="BEFORE">
			SELECT NVL(MAX(STAT_KEY), 0) + 1 statKey FROM TB_STAT_${year}
		</selectKey>
		INSERT INTO TB_STAT_${year} (
			STAT_KEY
			,YEAR
			,MONTH
			,DAY
			,HOUR
			,MINUTE
			,SECOND
			,STAT_TYP
			,SESSION_ID
			,URL
			,LOCALE
			,LANG
			,CNTRY
			,DSPLY_LANG
			,DSPLY_CNTRY
			,IP
			,REFERER
			,USER_AGENT
		) VALUES (
			#{statKey}
			,#{year}
			,#{month}
			,#{day}
			,#{hour}
			,#{minute}
			,#{second}
			,#{statTyp}
			,#{sessionId}
			,#{url}
			,#{locale}
			,#{lang}
			,#{cntry}
			,#{dsplyLang}
			,#{dsplyCntry}
			,#{ip}
			,#{referer}
			,#{userAgent}
		)
	</insert>
	
	<select id="statAll" resultType="egovMap">
		SELECT
			COUNT(*) AS STAT_DATA,
			'전체' AS STAT_LABEL
		FROM TB_STAT_${year}
		<include refid="defCond"></include>
	</select>
	
	<select id="statLang" resultType="egovMap">
		SELECT
			COUNT(DSPLY_LANG) AS STAT_DATA,
			DSPLY_LANG AS STAT_LABEL
		FROM TB_STAT_${year}
		<include refid="defCond"></include>
		GROUP BY DSPLY_LANG
		ORDER BY DSPLY_LANG
	</select>
	
	<select id="statCntry" resultType="egovMap">
		SELECT
			COUNT(DSPLY_CNTRY) AS STAT_DATA,
			DSPLY_CNTRY AS STAT_LABEL
		FROM TB_STAT_${year}
		<include refid="defCond"></include>
		GROUP BY DSPLY_CNTRY
		ORDER BY DSPLY_CNTRY
	</select>
	
	<select id="statYear" resultType="egovMap">
		SELECT
			COUNT(YEAR) AS STAT_DATA,
			YEAR AS STAT_LABEL
		FROM TB_STAT_${year}
		<include refid="defCond"></include>
		GROUP BY YEAR
		ORDER BY YEAR
	</select>

	<select id="statMonth" resultType="egovMap">
		SELECT
			A.SMONTH AS STAT_LABEL
			,NVL(B.STAT_DATA, 0) STAT_DATA
		FROM (
			SELECT 1 AS SMONTH FROM DUAL
			UNION SELECT 2 AS SMONTH FROM DUAL
			UNION SELECT 3 AS SMONTH FROM DUAL
			UNION SELECT 4 AS SMONTH FROM DUAL
			UNION SELECT 5 AS SMONTH FROM DUAL
			UNION SELECT 6 AS SMONTH FROM DUAL
			UNION SELECT 7 AS SMONTH FROM DUAL
			UNION SELECT 8 AS SMONTH FROM DUAL
			UNION SELECT 9 AS SMONTH FROM DUAL
			UNION SELECT 10 AS SMONTH FROM DUAL
			UNION SELECT 11 AS SMONTH FROM DUAL
			UNION SELECT 12 AS SMONTH FROM DUAL 
		)A LEFT OUTER JOIN (
			SELECT
				COUNT(MONTH) AS STAT_DATA,
				MONTH AS STAT_LABEL
			FROM TB_STAT_${year}
			<include refid="defCond"></include>
			GROUP BY MONTH
			ORDER BY MONTH
		) B
		ON A.SMONTH = B.STAT_LABEL
		ORDER BY A.SMONTH
	</select>

	<select id="statDate" resultType="egovMap" >
		SELECT
			A.SDATE AS STAT_LABEL
			,NVL(B.STAT_DATA, 0) STAT_DATA
		FROM (
			SELECT 1 AS SDATE FROM DUAL
			UNION SELECT 2 AS SDATE FROM DUAL
			UNION SELECT 3 AS SDATE FROM DUAL
			UNION SELECT 4 AS SDATE FROM DUAL
			UNION SELECT 5 AS SDATE FROM DUAL
			UNION SELECT 6 AS SDATE FROM DUAL
			UNION SELECT 7 AS SDATE FROM DUAL
			UNION SELECT 8 AS SDATE FROM DUAL
			UNION SELECT 9 AS SDATE FROM DUAL
			UNION SELECT 10 AS SDATE FROM DUAL
			UNION SELECT 11 AS SDATE FROM DUAL
			UNION SELECT 12 AS SDATE FROM DUAL
			UNION SELECT 13 AS SDATE FROM DUAL
			UNION SELECT 14 AS SDATE FROM DUAL
			UNION SELECT 15 AS SDATE FROM DUAL
			UNION SELECT 16 AS SDATE FROM DUAL
			UNION SELECT 17 AS SDATE FROM DUAL
			UNION SELECT 18 AS SDATE FROM DUAL
			UNION SELECT 19 AS SDATE FROM DUAL
			UNION SELECT 20 AS SDATE FROM DUAL
			UNION SELECT 21 AS SDATE FROM DUAL
			UNION SELECT 22 AS SDATE FROM DUAL
			UNION SELECT 23 AS SDATE FROM DUAL
			UNION SELECT 24 AS SDATE FROM DUAL
			UNION SELECT 25 AS SDATE FROM DUAL
			UNION SELECT 26 AS SDATE FROM DUAL
			UNION SELECT 27 AS SDATE FROM DUAL
			UNION SELECT 28 AS SDATE FROM DUAL
			UNION SELECT 29 AS SDATE FROM DUAL
			UNION SELECT 30 AS SDATE FROM DUAL
			UNION SELECT 31 AS SDATE FROM DUAL
		)A LEFT OUTER JOIN (
			SELECT
				COUNT(DAY) AS STAT_DATA,
				DAY AS STAT_LABEL
			FROM TB_STAT_${year}
			<include refid="defCond"></include>
			GROUP BY DAY, MONTH
			HAVING MONTH = #{month}
			ORDER BY DAY
		) B
		ON A.SDATE = B.STAT_LABEL
		ORDER BY A.SDATE
	</select>

	<select id="statHour" resultType="egovMap" >
		SELECT
			A.SHOUR AS STAT_LABEL
			,NVL(B.STAT_DATA, 0) STAT_DATA
		FROM (
			SELECT 0 AS SHOUR FROM DUAL
			UNION SELECT 1 AS SHOUR FROM DUAL
			UNION SELECT 2 AS SHOUR FROM DUAL
			UNION SELECT 3 AS SHOUR FROM DUAL
			UNION SELECT 4 AS SHOUR FROM DUAL
			UNION SELECT 5 AS SHOUR FROM DUAL
			UNION SELECT 6 AS SHOUR FROM DUAL
			UNION SELECT 7 AS SHOUR FROM DUAL
			UNION SELECT 8 AS SHOUR FROM DUAL
			UNION SELECT 9 AS SHOUR FROM DUAL
			UNION SELECT 10 AS SHOUR FROM DUAL
			UNION SELECT 11 AS SHOUR FROM DUAL
			UNION SELECT 12 AS SHOUR FROM DUAL
			UNION SELECT 13 AS SHOUR FROM DUAL
			UNION SELECT 14 AS SHOUR FROM DUAL
			UNION SELECT 15 AS SHOUR FROM DUAL
			UNION SELECT 16 AS SHOUR FROM DUAL
			UNION SELECT 17 AS SHOUR FROM DUAL
			UNION SELECT 18 AS SHOUR FROM DUAL
			UNION SELECT 19 AS SHOUR FROM DUAL
			UNION SELECT 20 AS SHOUR FROM DUAL
			UNION SELECT 21 AS SHOUR FROM DUAL
			UNION SELECT 22 AS SHOUR FROM DUAL 
			UNION SELECT 23 AS SHOUR FROM DUAL
		)A LEFT OUTER JOIN (
			SELECT
				COUNT(HOUR) AS STAT_DATA,
				HOUR AS STAT_LABEL
			FROM TB_STAT_${year}
			<include refid="defCond"></include>
			GROUP BY HOUR, DAY, MONTH
			HAVING MONTH = #{month} AND DAY = #{date}
			ORDER BY HOUR
		) B
		ON A.SHOUR = B.STAT_LABEL
		ORDER BY A.SHOUR
	</select>

	<select id="statMinute" resultType="egovMap" >
		SELECT
			A.SMINUTE AS STAT_LABEL
			,NVL(B.STAT_DATA, 0) STAT_DATA
		FROM (
			SELECT 0 AS SMINUTE FROM DUAL
			UNION SELECT 1 AS SMINUTE FROM DUAL
			UNION SELECT 2 AS SMINUTE FROM DUAL
			UNION SELECT 3 AS SMINUTE FROM DUAL
			UNION SELECT 4 AS SMINUTE FROM DUAL
			UNION SELECT 5 AS SMINUTE FROM DUAL
			UNION SELECT 6 AS SMINUTE FROM DUAL
			UNION SELECT 7 AS SMINUTE FROM DUAL
			UNION SELECT 8 AS SMINUTE FROM DUAL
			UNION SELECT 9 AS SMINUTE FROM DUAL
			UNION SELECT 10 AS SMINUTE FROM DUAL
			UNION SELECT 11 AS SMINUTE FROM DUAL
			UNION SELECT 12 AS SMINUTE FROM DUAL
			UNION SELECT 13 AS SMINUTE FROM DUAL
			UNION SELECT 14 AS SMINUTE FROM DUAL
			UNION SELECT 15 AS SMINUTE FROM DUAL
			UNION SELECT 16 AS SMINUTE FROM DUAL
			UNION SELECT 17 AS SMINUTE FROM DUAL
			UNION SELECT 18 AS SMINUTE FROM DUAL
			UNION SELECT 19 AS SMINUTE FROM DUAL
			UNION SELECT 20 AS SMINUTE FROM DUAL
			UNION SELECT 21 AS SMINUTE FROM DUAL
			UNION SELECT 22 AS SMINUTE FROM DUAL
			UNION SELECT 23 AS SMINUTE FROM DUAL
			UNION SELECT 24 AS SMINUTE FROM DUAL
			UNION SELECT 25 AS SMINUTE FROM DUAL
			UNION SELECT 26 AS SMINUTE FROM DUAL
			UNION SELECT 27 AS SMINUTE FROM DUAL
			UNION SELECT 28 AS SMINUTE FROM DUAL
			UNION SELECT 29 AS SMINUTE FROM DUAL
			UNION SELECT 30 AS SMINUTE FROM DUAL
			UNION SELECT 31 AS SMINUTE FROM DUAL
			UNION SELECT 32 AS SMINUTE FROM DUAL
			UNION SELECT 33 AS SMINUTE FROM DUAL
			UNION SELECT 34 AS SMINUTE FROM DUAL
			UNION SELECT 35 AS SMINUTE FROM DUAL
			UNION SELECT 36 AS SMINUTE FROM DUAL
			UNION SELECT 37 AS SMINUTE FROM DUAL
			UNION SELECT 38 AS SMINUTE FROM DUAL
			UNION SELECT 39 AS SMINUTE FROM DUAL
			UNION SELECT 40 AS SMINUTE FROM DUAL
			UNION SELECT 41 AS SMINUTE FROM DUAL
			UNION SELECT 42 AS SMINUTE FROM DUAL
			UNION SELECT 43 AS SMINUTE FROM DUAL
			UNION SELECT 44 AS SMINUTE FROM DUAL
			UNION SELECT 45 AS SMINUTE FROM DUAL
			UNION SELECT 46 AS SMINUTE FROM DUAL
			UNION SELECT 47 AS SMINUTE FROM DUAL
			UNION SELECT 48 AS SMINUTE FROM DUAL
			UNION SELECT 49 AS SMINUTE FROM DUAL
			UNION SELECT 50 AS SMINUTE FROM DUAL
			UNION SELECT 51 AS SMINUTE FROM DUAL
			UNION SELECT 52 AS SMINUTE FROM DUAL
			UNION SELECT 53 AS SMINUTE FROM DUAL
			UNION SELECT 54 AS SMINUTE FROM DUAL
			UNION SELECT 55 AS SMINUTE FROM DUAL
			UNION SELECT 56 AS SMINUTE FROM DUAL
			UNION SELECT 57 AS SMINUTE FROM DUAL
			UNION SELECT 58 AS SMINUTE FROM DUAL
			UNION SELECT 59 AS SMINUTE FROM DUAL
		)A LEFT OUTER JOIN (
			SELECT
				COUNT(MINUTE) AS STAT_DATA,
				MINUTE AS STAT_LABEL
			FROM TB_STAT_${year}
			<include refid="defCond"></include>
			GROUP BY MINUTE, HOUR, DAY, MONTH
			HAVING MONTH = #{month} AND DAY = #{date} AND HOUR = #{hour}
			ORDER BY MINUTE
		) B
		ON A.SMINUTE = B.STAT_LABEL
		ORDER BY A.SMINUTE
	</select>

	<select id="selectStatTables" resultType="egovMap">
		SELECT * FROM TAB WHERE TNAME LIKE #{tablePrefix} || '%'
	</select>

	<select id="selectCountByTable" resultType="int">
		SELECT 	COUNT(*)
		FROM 	TB_STAT_${year}
		WHERE	STAT_TYP = #{statTyp}	
		<if test="month != null and month != ''">
			AND	MONTH = #{month}
		</if>
		<if test="date != null and date != ''">
			AND	DAY = #{date}
		</if>
	</select>
	
	
	
	<!-- == job ==================================================== -->
	<select id="createNextYearTable">
		${sql}
	</select>
	
	<select id="isNextYearTable" resultType="egovMap">
		SELECT * FROM TAB WHERE TNAME=#{tableNm}
	</select>

</mapper>

